import { type Session } from "next-auth";
import { SessionProvider, useSession, signIn, signOut } from "next-auth/react";
import { type AppType } from "next/app";
import { api } from "~/utils/api";
import Link from "next/link";
import { useRouter } from "next/router";
import Head from "next/head";

import "~/styles/globals.css";

const MyApp: AppType<{ session: Session | null }> = ({
  Component,
  pageProps: { session, ...pageProps },
}) => {
  return (
    <>
      <Head>
        <title>Flex Companion</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SessionProvider session={session}>
        <Header />
        <Component {...pageProps} />
      </SessionProvider>
    </>
  );
};

const Header = () => {
  const router = useRouter();
  const { pathname } = router;
  const { data: sessionData } = useSession();

  return (
    <header className="fixed top-0 z-50 w-full bg-black p-8 text-3xl  text-white">
      <nav className="w-full">
        <ul className="inline-flex w-9/12 flex-wrap justify-center gap-8">
          <li>
            {sessionData && (
              <Link
                href="/dashboard"
                className={
                  pathname == "/dashboard"
                    ? "underline decoration-4 underline-offset-8"
                    : ""
                }
              >
                DASHBOARD
              </Link>
            )}
          </li>
          <li>
            {sessionData && (
              <Link
                href="/blocks"
                className={
                  pathname == "/blocks"
                    ? "underline decoration-4 underline-offset-8"
                    : ""
                }
              >
                BLOCKS
              </Link>
            )}
          </li>
        </ul>
        <div className="inline-flex">
          <button
            onClick={() =>
              sessionData
                ? signOut({ callbackUrl: "/" })
                : signIn("discord", { callbackUrl: "/dashboard" })
            }
          >
            {sessionData ? "SIGN OUT" : "SIGN IN"}
          </button>
        </div>
      </nav>
    </header>
  );
};

export default api.withTRPC(MyApp);
